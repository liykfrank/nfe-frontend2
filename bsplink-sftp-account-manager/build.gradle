buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
  id "io.franzbecker.gradle-lombok" version "1.12"
  id "org.sonarqube" version "2.6"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

group = 'org.iata.bsplink'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven {
	   url 'http://nexus.nfedev.accelya.com/repository/maven-public'
	}
}

checkstyle {
    toolVersion = '8.0'
}

jacoco {
    toolVersion = "0.8.1"
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.security:spring-security-core:5.0.5.RELEASE')
    compile('io.springfox:springfox-swagger2:2.8.0')
    compile('io.springfox:springfox-swagger-ui:2.8.0')
    compile('org.flywaydb:flyway-core:5.0.7')
    compile('org.apache.commons:commons-exec:1.3')
    compile('org.iata.bsplink:bsplink-commons-rest:0.0.1')
    compile('org.apache.commons:commons-lang3:3.7')
	runtime('com.h2database:h2')
	runtime('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('commons-io:commons-io:2.6')
	testCompile('pl.pragmatists:JUnitParams:1.1.1')
}

// Integration tests
// See: http://buransky.com/programming/integration-testing-with-gradle/
configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}

sourceSets {
    itest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/itest/java')
    }
}

task itest(type: Test) {
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath
}

check.dependsOn itest
itest.mustRunAfter test

// End of Integration tests

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "build/jacoco/itest.exec"
    }
}

tasks.sonarqube.dependsOn tasks.withType(Test)
