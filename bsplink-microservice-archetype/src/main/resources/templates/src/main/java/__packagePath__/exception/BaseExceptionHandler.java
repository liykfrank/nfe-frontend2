package @packageName@.exception;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Data;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
@RequestMapping(produces = "application/json")
public class BaseExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(BaseExceptionHandler.class);

    /**
     * Handles exceptions of type Exception. All exceptions generated by the application will go
     * through this handler unless there is a more specific handler for the thrown exception.
     *
     * @param ex the exception that is going to be handled
     * @return the generated BaseErrorResponse
     */
    @ExceptionHandler(Exception.class)
    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
    public BaseErrorResponse unhandledErrors(Exception ex) {

        logger.error(ex.getMessage(), ex);

        return new BaseErrorResponse(BaseErrorEnum.INTERNAL_SERVER_ERROR.getErrorCode(),
                BaseErrorEnum.INTERNAL_SERVER_ERROR.getDescription().replace("{0}",
                        ex.getMessage()));
    }

    /**
     * Handles exceptions of type BaseException.
     *
     * @param ex the exception that is going to be handled
     * @return ResponseEntity containing the generated BaseErrorResponse
     */
    @ExceptionHandler(BaseException.class)
    public ResponseEntity<BaseErrorResponse> handleErrorEnum(BaseException ex) {

        logger.error(ex.getMessage(), ex);

        HttpStatus httpStatus =
                ex.getHttpStatus() != null ? ex.getHttpStatus() : HttpStatus.INTERNAL_SERVER_ERROR;

        BaseErrorResponse errorResponse =
                new BaseErrorResponse(ex.getErrorCode(), ex.getDescription());

        return new ResponseEntity<>(errorResponse, httpStatus);
    }

    @Data
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    class BaseErrorResponse {

        @JsonProperty("error_code")
        private String errorCode;

        @JsonProperty("description")
        private String description;
    }
}
